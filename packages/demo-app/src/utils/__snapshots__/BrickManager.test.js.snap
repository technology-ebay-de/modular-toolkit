// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When I create a brick manager and I add a reducer with a complex store path and I add another reducer with a complex store path and I dispatch an action for the first reducer I added the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {
      "basel": "BASEL",
    },
    "xyzzy": Object {},
  },
}
`;

exports[`When I create a brick manager and I add a reducer with a complex store path and I add another reducer with a complex store path and I dispatch an action for the second reducer I added the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {},
    "xyzzy": Object {
      "payload": "hey ho let's go!",
    },
  },
}
`;

exports[`When I create a brick manager and I add a reducer with a complex store path and I dispatch an action for the complex store path reducer and I dispatch a different action the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {
      "basel": "COOKIE",
    },
  },
}
`;

exports[`When I create a brick manager and I add a reducer with a complex store path and I dispatch an action for the complex store path reducer and I dispatch and action for the root reducer the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {
      "basel": "BASEL",
    },
  },
  "thud": "THUD",
}
`;

exports[`When I create a brick manager and I add a reducer with a complex store path and I dispatch an action for the complex store path reducer the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {
      "basel": "BASEL",
    },
  },
}
`;

exports[`When I create a brick manager and I add a reducer with a complex store path and I dispatch and action for the root reducer the Redux state is correct 1`] = `
Object {
  "bricks": Object {
    "fasel": Object {},
  },
  "thud": "THUD",
}
`;

exports[`When I create a brick manager and I add a reducer with a simple store path and I dispatch an action for the simple store path reducer the Redux state is correct 1`] = `
Object {
  "argh": Object {
    "argh": "ARGH",
  },
}
`;

exports[`When I create a brick manager and I install a Brick the reducer is stored 1`] = `
Object {
  "bricks": Object {
    "fasel": [Function],
  },
}
`;

exports[`When I create a brick manager and I install two Bricks the reducers of both bricks are stored 1`] = `
Object {
  "bricks": Object {
    "fasel": [Function],
    "xyzzy": [Function],
  },
}
`;

exports[`When I create a brick manager and I save a reducer (internal function) with a complex path and I save another reducer at the first level of the reducers tree and I save yet another reducer that overwrites the path of the first one the internal property reducers has the correct value 1`] = `
Object {
  "bar": Object {
    "qux": "QUX_REDUCER",
    "thud": "THUD_REDUCER",
  },
}
`;

exports[`When I create a brick manager and I save a reducer (internal function) with a complex path and I save another reducer at the first level of the reducers tree the internal property reducers has the correct value 1`] = `
Object {
  "bar": Object {
    "qux": Object {
      "fred": "FRED_REDUCER",
    },
    "thud": "THUD_REDUCER",
  },
}
`;

exports[`When I create a brick manager and I save a reducer (internal function) with a complex path the internal property reducers has the correct value 1`] = `
Object {
  "bar": Object {
    "qux": Object {
      "fred": "FRED_REDUCER",
    },
  },
}
`;

exports[`When I create a brick manager and I save a reducer (internal function) with a simple path the internal property reducers has the correct value 1`] = `
Object {
  "fred": "FRED_REDUCER",
}
`;
